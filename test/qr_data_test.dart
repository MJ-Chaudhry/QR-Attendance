/// Unit tests for generating and parsing the QR code data
/// generated by the lecturer's end and read on the student's end.
library;

import 'package:flutter_test/flutter_test.dart';
import 'package:logger/logger.dart';
import 'package:qr_attendance/utils.dart';
import 'test_configs.dart';
import 'package:qr_attendance/database.dart';
import 'package:qr_attendance/qr_manager.dart';

final Logger logger = Logger();

void main() {
  test("QR generator test", () {
    String code = QRManager.createCode(qrCodeData);
    expect(code, qrCode);
  });

  group("QR code validation tests", () {
    test("Valid QR code test", () async {
      Database db = Database();

      await db.getConnection(host, port, user, password, dbName);

      QRCodeData? data = await QRManager.validateCode(qrCode);

      expect(data!.className, qrCodeData.className);
      expect(data.lessonDatetime, qrCodeData.lessonDatetime);
      expect(data.lessonID, qrCodeData.lessonID);
    });

    test("Invalid className QR code test", () async {
      Database db = Database();

      await db.getConnection(host, port, user, password, dbName);

      QRCodeData? data = await QRManager.validateCode(
          "INVALID_CLASSNAME 2024-10-30T08:15:00.000 1");

      expect(data, null);
    });

    test("Invalid lesson ID QR code test", () async {
      Database db = Database();

      await db.getConnection(host, port, user, password, dbName);

      QRCodeData? data = await QRManager.validateCode(
          "ICS2202_BICS2B 2024-10-30T08:15:00.000 256");

      expect(data, null);
    });

    test("Invalid parameters QR code test", () async {
      Database db = Database();

      await db.getConnection(host, port, user, password, dbName);

      QRCodeData? data = await QRManager.validateCode(
          "ICS2202_BICS2B 2024-10-30T08:15:00.000");

      expect(data, null);

      data = await QRManager.validateCode(
          "ICS2202_BICS2B 2024-10-30T08:15:00.000 1 sfdkjk");

      expect(data, null);
    });
  });
}
